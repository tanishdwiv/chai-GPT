"use client";  //Becuse we are using useForm hook  (it uses a context)

import Heading from "@/components/heading";

import axios from "axios";

import * as z from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import { Camera, Download} from "lucide-react";

import { useForm } from "react-hook-form";
import { useRouter } from "next/navigation";
import { Suspense, useState } from "react";

import { formSchema } from "./constants";

import { Form, FormControl, FormField, FormItem } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Empty } from "@/components/empty";
import Loader from "@/components/loader";
import { Card, CardFooter } from "@/components/ui/card";
import Image from "next/image";
import { useTranslations } from "next-intl";


const ImagesPage = () => {
    const router = useRouter();
    const [images, setImages] = useState<any>();

    const imagebot = useTranslations('imagebot'); 
    const common = useTranslations('common'); 

    const form = useForm<z.infer<typeof formSchema>>({
        resolver : zodResolver(formSchema),
        defaultValues : { prompt : ""}
    });

    const isLoading = form.formState.isSubmitting;

    const onSubmit = async (values : z.infer<typeof formSchema>) => {
        try{
           setImages(undefined);

           const response = await axios.post("/api/images", values);

           setImages(response.data);

           form.reset();

        } catch(error : any){
            //TODO : Pro Subscription
            console.log(error);
        } finally{
            router.refresh();
        }
};


    return ( 
        <div className="pb-1 md:px-10 px-1 bg-[#b4ded3]">
            <Heading 
            title={imagebot("title")}
            description={imagebot("description")}
            icon={Camera}
            iconcolor="text-pink-700"
            bgColor="bg-[#77B0AA]"
            />
            <div className="px-4 lg:px-8">
                <div>
                    <Form {...form}>
                      <form
                        onSubmit={form.handleSubmit(onSubmit)}
                        className="rounded-lg border w-full p-4 px-3 md:px-6 focus-within:shadow-sm grid grid-cols-12 gap-2 shadow-md bg-[#77B0AA] shadow-zinc-700"
                        >
                        <FormField
                        name="prompt"
                        render={({field})=>(
                           <FormItem className="col-span-12 lg:col-span-10 focus-visible:ring-0 rounded-md shadow-md border-0 outline-none shadow-zinc-500">
                              <FormControl className="m-0 p-0">
                                  <Input className= "border-0 outline-none focus-visible:ring-0 focus-visible:ring-[#E3FEF7] px-3 bg-[#E3FEF7]"
                                        disabled={isLoading} 
                                        placeholder="RAW photo, a portrait photo of a latina woman in casual clothes, natural skin, 8k uhd, high quality, film grain, Fujifilm XT3"
                                        autoComplete="off"
                                        {...field}
                                         />
                              </FormControl>
                           </FormItem>
                        )}
                        />
                        <Button className="col-span-12 lg:col-span-2 w-full " disabled={isLoading}>
                             {common("generate_btn")}
                        </Button>
                      </form>
                    </Form>
                </div>

                <div className="space-y-4 mt-4 pb-14">
                    {isLoading && (
                        <div className="p-8 bg-[#77B0AA] rounded-lg w-full flex items-center justify-center shadow-lg shadow-zinc-600">
                            <Loader url="code_bot_url" />
                        </div>
                    )}

                    {!images && !isLoading && (
                        <div>
                            <Empty />
                        </div>
                    )}

                    {images && !isLoading && (
                        <div className=" text-center bg-slate-400 p-3 rounded-lg">
                            <h1 className="text-center font-bold">Images Generated By Replicate API!</h1>
                        </div>
                    )}
                    
                    {images &&
                    <div className="sm:h-72 sm:w-72 min-w-96 min-h-96 items-center">
                            <Card
                              key={images}
                              className="rounded-lg overflow-hidden"
                              >
                                <div className="relative aspect-square">
                                <Suspense fallback={<p>Loading...</p>}>
                                    <Image 
                                        alt="Image"
                                        fill
                                        src={images}
                                    />
                                </Suspense>
                                </div>
                                <CardFooter className="p-2">
                                    <Button 
                                    onClick={() => window.open(images)}
                                    variant="outline" 
                                    className="w-full">
                                    <Download className="h-4 w-4 mr-2" />
                                       Download Image
                                    </Button>
                                </CardFooter>
                            </Card>
                    </div>
                    }
                    
                </div>
            </div>
            <div className="px-4 lg:px-8">
                {images && (<div className="w-full h-12 bg-gray-300 text-center mt-4 p-4 font-bold rounded-lg">
                        Go Up & Keep Generating More Images!
                </div>)
                }
            </div>
        </div>
     );
}
 
export default ImagesPage;
